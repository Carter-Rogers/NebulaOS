@page "/Account/Login"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using NebulaAPI.Data
@using Nebula_OS.Data
@using Nebula_OS.Services
@using Newtonsoft.Json

@inject SignInManager<User> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager


<MudGrid Class="pa-4" Style="margin-top: 10vh; margin-left: 20px; width: 100%;">
    <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
        <MudItem xs="4">
            <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
            <label for="email" class="form-label">Email</label>
            <ValidationMessage For="() => Input.Email" class="text-danger" />
        </MudItem>

        <MudItem xs="4">
            <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
            <label for="password" class="form-label">Password</label>
            <ValidationMessage For="() => Input.Password" class="text-danger" />
        </MudItem>

        <MudItem xs="4">
            <label class="form-label">
            <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
            Remember me
            </label>
        </MudItem>

        <MudItem xs="2">
            <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
        </MudItem>

        <MudItem xs="10">
             <p>
            <a href="Account/ForgotPassword">Forgot your password?</a>
          </p>
          <p>
            <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a>
          </p>
          <p>
            <a href="Account/ResendEmailConfirmation">Resend email confirmation</a>
          </p>
        </MudItem>
    </EditForm>
</MudGrid>



@code {
  private string? errorMessage;


  [SupplyParameterFromForm]
  private SignInAttempt Input { get; set; } = new();

  [SupplyParameterFromQuery]
  private string? ReturnUrl { get; set; }

  [CascadingParameter]
  private HttpContext HttpContext { get; set; } = default!;

  [Inject]
  private NebulaApiService ApiService { get; set; }


  protected override async Task OnInitializedAsync()
  {

    await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);

  }

  public async Task LoginUser()
  {
    SignInAttempt attempt = new SignInAttempt { Email = Input.Email, Password = Input.Password, Success = false };


    var query = await ApiService.HttpClient.PostAsJsonAsync<SignInAttempt>("User/logon", attempt);
    var result = await query.Content.ReadAsStringAsync();
    var response = JsonConvert.DeserializeObject<ApiResponse>(result);


    if (response.IsSuccess)
    {

      User user = JsonConvert.DeserializeObject<User>(response.Content);
      await SignInManager.SignInAsync(user, Input.RememberMe);


      NavigationManager.NavigateTo($"/");

    }


  }

  /*
  else if (result.RequiresTwoFactor)
    {
    RedirectManager.RedirectTo(
        "Account/LoginWith2fa",
        new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
  }
  else if (result.IsLockedOut)
    {
    Logger.LogWarning("User account locked out.");
    RedirectManager.RedirectTo("Account/Lockout");
    }
    else
    {
    errorMessage = "Error: Invalid login attempt.";
  }
  */
}

