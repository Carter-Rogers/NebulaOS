@using Nebula_OS.Services


@if(Url == null || Url == string.Empty)
{
  <p>Unknown Application Source</p>
}else
{
  @if(Opened)
  {

    <MudGrid>
      <MudItem xs="12" Style="@($"background:{Colors.Purple.Darken3}")">
        <p style="width: 100%;">@ApplicationName <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="()=>Opened = false">X</MudButton></p>


      </MudItem>
      <MudItem xs="12" Class="pa-4">
        <div style="width: 80%; height: 70vh; overflow: none;">

          <input type="text" @bind="currentUrl" placeholder="Enter URL" />
          <button @onclick="NavigateToUrl">Go</button>

          <div>
            <button @onclick="GoBack">Back</button>
            <button @onclick="GoForward">Forward</button>
            <button class="btn btn-primary" @onclick="ShowResponse">Show Response</button>
          </div>

          <p>Current URL: @currentUrl</p>

          
            <!-- The content from the navigated URL will be injected here -->
            @if (webContent != null)
            {
                      <div id="webContent" style="border:1px solid #ccc; padding: 20px; max-width: 100%; max-height: 70vh;">
                        <div style="max-width: 100%; max-height: 70vh; overflow-y: scroll;">@((MarkupString)@webContent)</div>
                      </div>
            }


        </div>


      </MudItem>
    </MudGrid>
  }
}


@code {
  [Parameter]
  public string Url { get; set; }

  [Parameter]
  public string ApplicationName { get; set; }

  [Parameter]
  public bool Opened { get; set; } = false;

  [Inject]
  NebulaApiService ApiService { get; set; }

  [Inject]
  IJSRuntime JSRuntime { get; set; }

  private string currentUrl = "https://www.google.com";
  private string? webContent;

  private RenderFragment RF2;

  private async Task NavigateToUrl()
  {
    // Basic URL validation (you can improve this)
    if (Uri.IsWellFormedUriString(currentUrl, UriKind.Absolute))
    {
      // Fetch the content from the URL
      webContent = await LoadWebContent(currentUrl);

      // Use JS interop to monitor link clicks and form submissions
      await JSRuntime.InvokeVoidAsync("monitorInjectedContent", DotNetObjectReference.Create(this), currentUrl);
    }
  }

  private async Task<string?> LoadWebContent(string url)
  {
    try
    {
      // Use HttpClient to fetch the content of the URL
      var response = await ApiService.HttpClient.GetStringAsync("https://localhost:7271/Search?url=" + url);

      webContent = response;

      StateHasChanged();

      return response;
    }
    catch (Exception ex)
    {
      return $"Error loading content: {ex.Message}";
    }
  }

  private async Task GoBack()
  {
    await JSRuntime.InvokeVoidAsync("history.back");
  }

  private async Task GoForward()
  {
    await JSRuntime.InvokeVoidAsync("history.forward");
  }

  [JSInvokable]
  public async Task OnLinkClick(string url)
  {
    Console.WriteLine($"Link clicked: {url}");

    await LoadWebContent(url);


  }

  [JSInvokable]
  public async Task OnFormSubmit(string url)
  {
    Console.WriteLine($"Form submitted: {url}");

    // Handle form submission, e.g., by sending data to your API
    await LoadWebContent(currentUrl + "/search?" + url);

  }


  private string captchaResponse;

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      await NavigateToUrl();
    }
    await base.OnAfterRenderAsync(firstRender);
  }

  [JSInvokable]
  public void CallbackOnSuccess(string response)
  {
    captchaResponse = response;
  }

  [JSInvokable]
  public void CallbackOnExpired(string response)
  {
    //...
  }


  private void ShowResponse()
  {
    captchaResponse = $"The response for the Google reCAPTCHA widget: {captchaResponse}";
  }
  }